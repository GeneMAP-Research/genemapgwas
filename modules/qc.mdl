def jobCompletionMessage() {
   return msg = """
          Pipeline execution summary
          ---------------------------
          Completed at: ${workflow.complete}
          Duration    : ${workflow.duration}
          Success     : ${workflow.success}
          workDir     : ${workflow.workDir}
          exit status : ${workflow.exitStatus}
          """
          .stripIndent()
}

def getBed() {
  return channel
      .fromFilePairs( params.bfile + ".{bed,bim,fam}", size: 3 )
}


process checkDuplicateSampleIds() {
    tag "checking duplicate samples..."
    publishDir \
        path: "${params.output_dir}/qc", \
        mode: 'copy'
    input:
        tuple \
            val(bedname), \
            path(bed)
    output:
        path("${params.out}_unique_samples.txt")
    script:
        """
        awk '{print \$1,\$2}' ${bedname}.fam | \
            sort | \
            uniq > ${params.out}_unique_samples.txt
        """
}

process removeDuplicateVars() {
    tag "romoving duplicate variants"
    label 'plink'
    input:
        tuple \
            val(bedname), \
            path(bed)
        path unique_samples
    output:
        tuple \
            path("${params.out}.bed"), \
            path("${params.out}.bim"), \
            path("${params.out}.fam"), \
            path("${params.out}.log")
    script:
        """
        plink2 \
            --bfile ${bedname} \
            --make-bed \
            --aec \
            --chr 1-22,X \
            --rm-dup force-first \
            --snps-only just-acgt \
            --keep ${unique_samples} \
            --max-alleles 2 \
            --min-alleles 2 \
            --set-all-var-ids '@:#:\$r:\$a' \
            --double-id \
            --threads ${task.cpus} \
            --out ${params.out}
        """
}

process getKingFormatFile() {
    tag "formatting data for KING..."
    label 'plink'
    input:
        tuple \
            path(bed), \
            path(bim), \
            path(fam), \
            path(log)
    output:
        tuple \
            path("${params.out}_king.bed"), \
            path("${params.out}_king.bim"), \
            path("${params.out}_king.fam"), \
            path("${params.out}_king.log")
    script:
        """
        plink \
            --bfile ${bed.baseName} \
            --make-bed \
            --threads ${task.cpus} \
            --out ${params.out}_king
        """
}

process checkDuplicateAndRelatedIndivs() {
    tag "checking related and duplicate individuals..."
    label 'king'
    label 'bigMemory'
    publishDir \
        path: "${params.output_dir}/qc/relatedness/", \
        mode: 'copy'
    input:
        tuple \
            path(bed), \
            path(bim), \
            path(fam), \
            path(log)
    output:
        tuple \
            path("${params.out}_fail-king-check.txt"), \
            path("${params.out}_king.seg"), \
            path("${params.out}_king_ibd1vsibd2.ps")
    script:
    if(params.keep_related == false)
        """
        king \
            -b ${bed} \
            --ibdseg \
            --degree 4 \
            --cpus ${task.cpus} \
            --rplot \
            --prefix ${params.out}_king

        awk '(\$8 == "Dup/MZ") || (\$8 == "FS") || (\$8 == "PO") || (\$8 == "2nd") {print \$1,\$2}' ${params.out}_king.seg | \
        sort | \
        uniq > ${params.out}_fail-king-check.txt
        """
    else
        """
        king \
            -b ${bed} \
            --ibdseg \
            --degree 4 \
            --rplot \
            --prefix ${params.out}_king

        awk '(\$8 == "Dup/MZ") {print \$1,\$2}' ${params.out}_king.seg | \
        sort | \
        uniq > ${params.out}_fail-king-check.txt
        """
}

process checkDiscordantSex() {
    debug true
    tag "checking discordant sex..."
    publishDir \
        pattern: "${params.out}_fail-sexcheck-qc.txt", \
        path: "${params.output_dir}/qc", \
        mode: 'copy'
    label 'plink'
    input:
        tuple \
            path(bed), \
            path(bim), \
            path(fam), \
            path(log)
        tuple \
            path(fail_relatedness), \
            path(king_seg), \
            path(king_plot)
    output:
        tuple \
            path("${params.out}_no-related.bed"), \
            path("${params.out}_no-related.bim"), \
            path("${params.out}_no-related.fam"), \
            path("${params.out}_no-related.log"), \
            path("${params.out}_fail-sexcheck-qc.txt")
    script:
        """
        sexclumn=\$(awk '{print \$5}' ${fam} | grep -vi -e '-9' -e 'na' | sort | uniq)

        plink \
            --bfile ${bed.baseName} \
            --split-x ${params.build_ver} no-fail \
            --remove ${fail_relatedness} \
            --make-bed \
            --out ${params.out}.temp1

        plink \
            --bfile ${params.out}.temp1 \
            --make-bed \
            --out ${params.out}.temp2

        plink \
            --bfile ${params.out}.temp2 \
            --set-hh-missing \
            --make-bed \
            --out ${params.out}_no-related
          
        if [ ! \$sexclumn -eq 2 ]; then
            echo ""
            echo "WARN: No Sex information present!"
            echo "WARN: Check for discordant sex will not be performed."
            echo "WARN: Update sex information in the input FAM file if you want this step to be performed."
            echo ""

            touch ${params.out}_fail-sexcheck-qc.txt
        else
            plink \
                --bfile ${params.out}_no-related \
                --check-sex \
                --out ${params.out}_no-related

            awk '\$5 == "PROBLEM" {print \$1,\$2,\$5}' ${params.out}_no-related.sexcheck | \
            sort | \
            uniq > ${params.out}_fail-sexcheck-qc.txt
        fi
        """
}

process computeSampleMissingnesStats() {
    tag "calculating missingness statistics..."
    publishDir \
        path: "${params.output_dir}/qc", \
        mode: 'copy'
    label 'plink'
    input:
        tuple \
            path(bed), \
            path(bim), \
            path(fam), \
            path(log), \
            path(fail_sexcheck)
    output:
        tuple \
            path("${params.out}.het"), \
            path("${params.out}.smiss")
    script:
        """
        plink2 \
            --bfile ${bed.baseName} \
            --het \
            --missing \
            --out ${params.out}

        sed -i 's/#//1' ${params.out}.het
        sed -i 's/#//1' ${params.out}.smiss
        """
}


process checkSamplesMissingess() {
    tag "checking sample missingness..."
    publishDir \
        path: "${params.output_dir}/qc", \
        mode: 'copy'
    label 'king'
    input:
        tuple \
            path(het), \
            path(smiss)
    output:
        tuple \
            path("${params.out}_sample_missingness.png"), \
            path("${params.out}_fail-missingness-qc.txt")
    script:
        template 'sample_missingness.r'
}

process removePoorQualitySamples() {
    tag "excluding poor quality samples..."
    label 'plink'
    input:
        tuple \
            path(bed), \
            path(bim), \
            path(fam), \
            path(log), \
            path(fail_sexcheck)
        tuple \
            path(missingness_plot), \
            path(fail_missingness)
    output:
        tuple \
            path("${params.out}-pass-sample-qc.bed"), \
            path("${params.out}-pass-sample-qc.bim"), \
            path("${params.out}-pass-sample-qc.fam"), \
            path("${params.out}-pass-sample-qc.log")
    script:
        """
        cat ${fail_sexcheck} ${fail_missingness} | \
        sort | \
        uniq > ${params.out}_fail-sex-miss-het-qc

        plink2 \
            --bfile ${bed.baseName} \
            --remove ${params.out}_fail-sex-miss-het-qc \
            --make-bed \
            --out ${params.out}-pass-sample-qc
        """
}

process checkPoorQualityVariants() {
    tag "checking poor quality snps..."
    label 'plink'
    publishDir \
        pattern: "${bed.baseName}-fail-diffmissing-qc.txt", \
        path: "${params.output_dir}/qc", \
        mode: 'copy'
    input:
        tuple \
            path(bed), \
            path(bim), \
            path(fam), \
            path(log)
    output:
        tuple \
            path("${bed.baseName}_temp1.bed"), \
            path("${bed.baseName}_temp1.bim"), \
            path("${bed.baseName}_temp1.fam"), \
            path("${bed.baseName}_temp1.log"), \
            path("${bed.baseName}-fail-diffmissing-qc.txt")
    script:

    // check if case-control phenotype is present and perform differential missingness

    if(params.pheno_file == 'NULL')
        """
        # initialize an empty diff missingness result file
        touch ${bed.baseName}-fail-diffmissing-qc.txt
        
        # check phenotype in fam file
        pheno=\$(awk '{print \$6}' ${fam} | grep -vi -e '-9' -e 'NA' | sort | uniq | wc -l)
        if [ \$pheno -eq 2 ]; then
            plink2 \
                --bfile ${bed.baseName} \
                --make-bed \
                --king-cutoff 0.25 \
                --out test-miss
 
            plink \
                --bfile test-miss \
                --test-missing \
                --out ${bed.baseName}-diffmissing

            awk '\$5 < 0.001 {print \$2,\$5}' \
                ${bed.baseName}-diffmissing.missing \
                > ${bed.baseName}-fail-diffmissing-qc.txt
        fi
        ################################################################
        # if case-control absent, diff missingness result will be empty
        # and code will not break
        ################################################################
        plink \
            --bfile ${bed.baseName} \
            --geno ${params.geno} \
            --hwe 1e-06 \
            --exclude ${bed.baseName}-fail-diffmissing-qc.txt \
            --make-bed \
            --out ${bed.baseName}_temp1
        """
    else
        """
        # initialize an empty diff missingness result file
        touch ${bed.baseName}-fail-diffmissing-qc.txt

        # check phenotype in supplied pheno file 
        ncol=\$(awk 'END {print NF}' ${params.pheno_file})
        for pheno_col in \$(seq 3 \$ncol); do
            pheno=\$(awk -v col="\${pheno_col}" '{print \$col}' ${params.pheno_file} | sed '1d' | grep -vi -e '-9' -e 'NA' | sort | uniq | wc -l)
            if [ \$pheno -eq 2 ]; then
                plink2 \
                    --bfile ${bed.baseName} \
                    --pheno ${params.pheno_file} \
                    --pheno-col-nums \$pheno_col \
                    --king-cutoff 0.25 \
                    --make-bed \
                    --out ${bed.baseName}-pheno-updated
                
                plink \
                    --bfile ${bed.baseName}-pheno-updated \
                    --test-missing \
                    --out ${bed.baseName}-diffmissing
    
                awk '\$5 < 0.001 {print \$2,\$5}' \
                    ${bed.baseName}-diffmissing.missing \
                    > ${bed.baseName}-fail-diffmissing-qc.txt
            fi
        done
        plink \
            --bfile ${bed.baseName} \
            --geno ${params.geno} \
            --hwe 1e-06 \
            --exclude ${bed.baseName}-fail-diffmissing-qc.txt \
            --make-bed \
            --out ${bed.baseName}_temp1
        """
}

process checkPalindromes() {
    tag "checking palindromic snps..."
    publishDir \
        pattern: "${bed.baseName}*at-cg_snps.txt", \
        path: "${params.output_dir}/qc", \
        mode: 'copy'
    label 'rbase'
    input:
        tuple \
            path(bed), \
            path(bim), \
            path(fam), \
            path(log), \
            path(difmis)
    output:
        tuple \
            path(bed), \
            path(bim), \
            path(fam), \
            path(log), \
            path("${bed.baseName}*at-cg_snps.txt")
    script:
        """       
        palindromic_snps.r ${bim}
        """
}

process removePoorQualityVariants() {
    tag "removing poor quality snps..."
    publishDir \
        path: "${params.output_dir}/qc", \
        mode: 'copy'
    label 'plink'
    input:
        tuple \
            path(bed), \
            path(bim), \
            path(fam), \
            path(log), \
            path(palindromes)
    output:
        tuple \
            path("${params.out}-pass-qc.bed"), \
            path("${params.out}-pass-qc.bim"), \
            path("${params.out}-pass-qc.fam"), \
            path("${params.out}-pass-qc.vcf.gz"), \
            path("${params.out}-pass-qc.log")
    script:
        """
        plink \
            --bfile ${bed.baseName} \
            --maf ${params.maf} \
            --exclude ${palindromes} \
            --mind ${params.mind} \
            --make-bed \
            --merge-x no-fail \
            --out ${params.out}-pass-qc

        plink2 \
            --bfile ${params.out}-pass-qc \
            --export vcf-4.2 bgz id-paste='iid' \
            --out ${params.out}-pass-qc
        """
}

process performPca() {
    tag "running PCA..."
    publishDir \
        path: "${params.output_dir}/qc", \
        mode: 'copy'
    label 'plink'
    cache 'lenient'
    input:
        tuple \
            path(bed), \
            path(bim), \
            path(fam), \
            path(vcf), \
            path(log)
    output:
        tuple \
            path("${bed.baseName}.eigenvec.txt"), \
            path("${bed.baseName}.eigenval")
    script:
        """
        plink2 \
            --bfile ${bed.baseName} \
            --indep-pairwise 50 10 0.2 \
            --king-cutoff 0.25 \
            --maf 0.05 \
            --out ${bed.baseName}
        plink2 \
            --bfile ${bed.baseName} \
            --maf 0.05 \
            --make-bed \
            --extract ${bed.baseName}.prune.in \
            --keep ${bed.baseName}.king.cutoff.in.id \
            --out pca
        plink2 \
            --bfile pca \
            --pca 10 \
            --out ${bed.baseName}
        sed 's/#//1' ${bed.baseName}.eigenvec > ${bed.baseName}.eigenvec.txt
        """
}

process plotPca() {
    tag "plotting PCA..."
    publishDir \
        path: "${params.output_dir}/qc", \
        mode: 'copy'
    label 'rbase'
    input:
        tuple \
            path(evec), \
            path(eval)
    output:
        path("${evec.baseName}_pca.png")
    script:
        template 'qc_pca.r'
}
